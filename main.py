from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ConversationHandler, MessageHandler, filters, PicklePersistence
from dotenv import load_dotenv
import requests
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
UNSPLASH_ACCESS_KEY = os.getenv('UNSPLASH_ACCESS_KEY')
BASE_URL = 'https://api.unsplash.com'
APP_NAME = 'SplashBot'

HEADERS = {
    'Authorization': f'Client-ID {UNSPLASH_ACCESS_KEY}',
    'Accept-Version': 'v1'
}

# –°—Ç–∞–¥–∏–∏ –¥–ª—è ConversationHandler
MAIN_MENU, RANDOM_PHOTO, SEARCH_INPUT, SEARCH_RESULT, COLLECTIONS_MENU, COLLECTION_RESULT = range(6)

# –ú–µ–Ω—é
MAIN_MENU_OPTIONS = [["üñºÔ∏è –°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ"], ["üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ"], ["üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏–∏"]]


def get_unsplash_photos(endpoint, params=None):
    try:
        response = requests.get(f'{BASE_URL}/{endpoint}', headers=HEADERS, params=params or {})
        response.raise_for_status()
        remaining = int(response.headers.get('X-Ratelimit-Remaining', 50))
        if remaining < 10:
            logger.warning(f"–û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}")
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API Unsplash: {str(e)}")
        raise Exception(f"–û—à–∏–±–∫–∞ API: {str(e)}")


def trigger_download(download_url):
    try:
        requests.get(download_url, headers=HEADERS)
    except requests.exceptions.RequestException as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")


class UnsplashBot:
    def __init__(self):
        self.search_queries = {}

    def get_attribution(self, photo):
        profile_url = f"{photo['user']['links']['html']}?utm_source={APP_NAME}&utm_medium=referral"
        return f"–§–æ—Ç–æ –æ—Ç <a href='{profile_url}'>{photo['user']['name']}</a> –Ω–∞ Unsplash"

    async def start(self, update, context):
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU_OPTIONS, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
        return MAIN_MENU

    async def main_menu(self, update, context):
        text = update.message.text.strip()
        if text == "üñºÔ∏è –°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ":
            return await self.random_photo(update, context)
        elif text == "üîç –ü–æ–∏—Å–∫ —Ñ–æ—Ç–æ":
            return await self.search_menu(update, context)
        elif text == "üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏–∏":
            return await self.collections_menu(update, context, page=1)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
            return MAIN_MENU

    async def random_photo(self, update, context):
        try:
            photo = get_unsplash_photos('photos/random')
            trigger_download(photo['links']['download_location'])
            reply_markup = ReplyKeyboardMarkup(
                [["–ï—â–µ —Ñ–æ—Ç–æ"], ["–ù–∞–∑–∞–¥"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await update.message.reply_photo(
                photo=photo['urls']['regular'],
                caption=self.get_attribution(photo),
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return RANDOM_PHOTO
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
            return MAIN_MENU

    async def handle_random_photo(self, update, context):
        text = update.message.text.strip()
        if text == "–ï—â–µ —Ñ–æ—Ç–æ":
            return await self.random_photo(update, context)
        elif text == "–ù–∞–∑–∞–¥":
            reply_markup = ReplyKeyboardMarkup(MAIN_MENU_OPTIONS, resize_keyboard=True)
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
            return MAIN_MENU
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
            return RANDOM_PHOTO

    async def search_menu(self, update, context):
        chat_id = update.message.chat_id
        self.search_queries[chat_id] = ''
        reply_markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=reply_markup)
        return SEARCH_INPUT

    async def handle_search_input(self, update, context):
        chat_id = update.message.chat_id
        text = update.message.text.strip()
        if text == "–ù–∞–∑–∞–¥":
            reply_markup = ReplyKeyboardMarkup(MAIN_MENU_OPTIONS, resize_keyboard=True)
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
            return MAIN_MENU
        if chat_id in self.search_queries:
            context.user_data["search_query"] = text
            context.user_data["search_page"] = 1
            await self.show_search_results(update, context, text, 1)
            del self.search_queries[chat_id]
            return SEARCH_RESULT

    async def show_search_results(self, update, context, query, page):
        try:
            params = {'query': query, 'page': page, 'per_page': 1, 'order_by': 'relevant'}
            results = get_unsplash_photos('search/photos', params=params)
            if not results['results']:
                reply_markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
                await update.message.reply_text("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
                return SEARCH_RESULT

            photo = results['results'][0]
            trigger_download(photo['links']['download_location'])
            context.user_data["total_pages"] = results['total_pages']

            reply_markup = ReplyKeyboardMarkup(
                [["‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ"], ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ"], ["–ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
            await update.message.reply_photo(
                photo=photo['urls']['regular'],
                caption=f"{self.get_attribution(photo)}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {results['total_pages']}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return SEARCH_RESULT
        except Exception as e:
            reply_markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=reply_markup)
            return SEARCH_RESULT

    async def handle_search_result(self, update, context):
        text = update.message.text.strip()
        query = context.user_data.get("search_query")
        page = context.user_data.get("search_page", 1)
        total_pages = context.user_data.get("total_pages", 1)

        if text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ" and page > 1:
            context.user_data["search_page"] = page - 1
            await self.show_search_results(update, context, query, page - 1)
        elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ" and page < total_pages:
            context.user_data["search_page"] = page + 1
            await self.show_search_results(update, context, query, page + 1)
        elif text == "–ù–∞–∑–∞–¥":
            reply_markup = ReplyKeyboardMarkup(MAIN_MENU_OPTIONS, resize_keyboard=True)
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
            return MAIN_MENU
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return SEARCH_RESULT

    async def collections_menu(self, update, context, page=1):
        try:
            params = {'page': page, 'per_page': 10}
            collections = get_unsplash_photos('collections', params=params)
            if not collections:
                reply_markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
                await update.message.reply_text("–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
                return COLLECTIONS_MENU

            context.user_data["collections"] = {c["title"]: c["id"] for c in collections}
            context.user_data["collections_page"] = page

            collection_titles = [[c["title"]] for c in collections]
            navigation = []
            if page > 1:
                navigation.append("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            navigation.append("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            navigation.append("–ù–∞–∑–∞–¥")
            reply_markup = ReplyKeyboardMarkup(collection_titles + [navigation], resize_keyboard=True,
                                               one_time_keyboard=True)

            await update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):', reply_markup=reply_markup)
            return COLLECTIONS_MENU
        except Exception as e:
            reply_markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {str(e)}", reply_markup=reply_markup)
            return COLLECTIONS_MENU

    async def handle_collections_menu(self, update, context):
        text = update.message.text.strip()
        page = context.user_data.get("collections_page", 1)

        if text == "–ù–∞–∑–∞–¥":
            reply_markup = ReplyKeyboardMarkup(MAIN_MENU_OPTIONS, resize_keyboard=True)
            await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
            return MAIN_MENU
        elif text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" and page > 1:
            return await self.collections_menu(update, context, page - 1)
        elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
            return await self.collections_menu(update, context, page + 1)

        collections = context.user_data.get("collections", {})
        if text in collections:
            context.user_data["collection_id"] = collections[text]
            context.user_data["collection_title"] = text
            context.user_data["collection_page"] = 1
            await self.show_collection(update, context, collections[text], text, 1)
            return COLLECTION_RESULT
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return COLLECTIONS_MENU

    async def show_collection(self, update, context, collection_id, collection_title, page):
        try:
            params = {'page': page, 'per_page': 1}
            results = get_unsplash_photos(f'collections/{collection_id}/photos', params=params)
            logger.info(f"–û—Ç–≤–µ—Ç API –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_id}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: {results}")

            if not results or len(results) == 0:
                reply_markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
                await update.message.reply_text("–§–æ—Ç–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
                return COLLECTION_RESULT

            photo = results[0]
            trigger_download(photo['links']['download_location'])

            collection_info = get_unsplash_photos(f'collections/{collection_id}')
            total_photos = collection_info.get('total_photos', 1)
            total_pages = (total_photos + params['per_page'] - 1) // params['per_page']
            context.user_data["total_pages"] = total_pages

            reply_markup = ReplyKeyboardMarkup(
                [["‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ"], ["‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ"], ["–ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
            await update.message.reply_photo(
                photo=photo['urls']['regular'],
                caption=f"–ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection_title}\n{self.get_attribution(photo)}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return COLLECTION_RESULT
        except Exception as e:
            reply_markup = ReplyKeyboardMarkup([["–ù–∞–∑–∞–¥"]], resize_keyboard=True)
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}", reply_markup=reply_markup)
            return COLLECTION_RESULT

    async def handle_collection_result(self, update, context):
        text = update.message.text.strip()
        collection_id = context.user_data.get("collection_id")
        collection_title = context.user_data.get("collection_title")
        page = context.user_data.get("collection_page", 1)
        total_pages = context.user_data.get("total_pages", 1)

        if text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ" and page > 1:
            context.user_data["collection_page"] = page - 1
            await self.show_collection(update, context, collection_id, collection_title, page - 1)
        elif text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ" and page < total_pages:
            context.user_data["collection_page"] = page + 1
            await self.show_collection(update, context, collection_id, collection_title, page + 1)
        elif text == "–ù–∞–∑–∞–¥":
            await self.collections_menu(update, context, context.user_data.get("collections_page", 1))
            return COLLECTIONS_MENU
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return COLLECTION_RESULT


async def cancel(update, context):
    reply_markup = ReplyKeyboardMarkup(MAIN_MENU_OPTIONS, resize_keyboard=True)
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)
    return ConversationHandler.END


async def error_handler(update, context):
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    if update and hasattr(update, 'message'):
        reply_markup = ReplyKeyboardMarkup(MAIN_MENU_OPTIONS, resize_keyboard=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


def main():
    persistence = PicklePersistence(filepath='bot_data.pkl')
    application = Application.builder().token(TOKEN).persistence(persistence).build()
    bot = UnsplashBot()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", bot.start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.main_menu)],
            RANDOM_PHOTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_random_photo)],
            SEARCH_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_search_input)],
            SEARCH_RESULT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_search_result)],
            COLLECTIONS_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_collections_menu)],
            COLLECTION_RESULT: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_collection_result)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
        persistent=True,
        name='unsplash_conversation'
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    application.run_polling()


if __name__ == '__main__':
    main()
